### YamlMime:ManagedReference
items:
- uid: VRSketchingGeometry.Meshing.RibbonMesh
  commentId: T:VRSketchingGeometry.Meshing.RibbonMesh
  id: RibbonMesh
  parent: VRSketchingGeometry.Meshing
  children:
  - VRSketchingGeometry.Meshing.RibbonMesh.#ctor(System.Collections.Generic.List{UnityEngine.Vector3},UnityEngine.Vector3)
  - VRSketchingGeometry.Meshing.RibbonMesh.#ctor(UnityEngine.Vector3)
  - VRSketchingGeometry.Meshing.RibbonMesh.AddPoint(UnityEngine.Vector3,UnityEngine.Quaternion)
  - VRSketchingGeometry.Meshing.RibbonMesh.AddPoints(System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{UnityEngine.Quaternion})
  - VRSketchingGeometry.Meshing.RibbonMesh.DeletePoint
  - VRSketchingGeometry.Meshing.RibbonMesh.GetCrossSection
  - VRSketchingGeometry.Meshing.RibbonMesh.GetMesh(System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{UnityEngine.Quaternion})
  - VRSketchingGeometry.Meshing.RibbonMesh.GetMesh(System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{UnityEngine.Quaternion},UnityEngine.Vector3)
  - VRSketchingGeometry.Meshing.RibbonMesh.GetMeshFromVertices(System.Collections.Generic.List{UnityEngine.Vector3},System.Int32)
  - VRSketchingGeometry.Meshing.RibbonMesh.GetVertices(System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{UnityEngine.Quaternion},UnityEngine.Vector3)
  - VRSketchingGeometry.Meshing.RibbonMesh.Scale
  - VRSketchingGeometry.Meshing.RibbonMesh.TransformPoint(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3)
  - VRSketchingGeometry.Meshing.RibbonMesh.TransformPoints(System.Collections.Generic.List{UnityEngine.Vector3},UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3)
  langs:
  - csharp
  - vb
  name: RibbonMesh
  nameWithType: RibbonMesh
  fullName: VRSketchingGeometry.Meshing.RibbonMesh
  type: Class
  source:
    remote:
      path: Assets/VRSketchingGeometryPackage/Runtime/ModelingKernel/RibbonMesh.cs
      branch: fix/DocFXIntegration
      repo: git@github.com:hunsri/VRSketchingGeometry.git
    id: RibbonMesh
    path: Assets/VRSketchingGeometryPackage/Runtime/ModelingKernel/RibbonMesh.cs
    startLine: 14
  assemblies:
  - HTWBerlin.FKI.VRSketchingGeometry.Runtime
  namespace: VRSketchingGeometry.Meshing
  summary: "\nGenerate a mesh with a certain cross section along given points and rotations.\nContrary to the LineExtruder and ParallelTransportTubeMesh, the rotations of the cross sections have to be given explicitly and are not calculated automatically.\n"
  remarks: 'Original author: tterpi'
  example: []
  syntax:
    content: public class RibbonMesh
    content.vb: Public Class RibbonMesh
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: VRSketchingGeometry.Meshing.RibbonMesh.GetCrossSection
  commentId: M:VRSketchingGeometry.Meshing.RibbonMesh.GetCrossSection
  id: GetCrossSection
  parent: VRSketchingGeometry.Meshing.RibbonMesh
  langs:
  - csharp
  - vb
  name: GetCrossSection()
  nameWithType: RibbonMesh.GetCrossSection()
  fullName: VRSketchingGeometry.Meshing.RibbonMesh.GetCrossSection()
  type: Method
  source:
    remote:
      path: Assets/VRSketchingGeometryPackage/Runtime/ModelingKernel/RibbonMesh.cs
      branch: fix/DocFXIntegration
      repo: git@github.com:hunsri/VRSketchingGeometry.git
    id: GetCrossSection
    path: Assets/VRSketchingGeometryPackage/Runtime/ModelingKernel/RibbonMesh.cs
    startLine: 20
  assemblies:
  - HTWBerlin.FKI.VRSketchingGeometry.Runtime
  namespace: VRSketchingGeometry.Meshing
  syntax:
    content: public List<Vector3> GetCrossSection()
    return:
      type: System.Collections.Generic.List{UnityEngine.Vector3}
    content.vb: Public Function GetCrossSection As List(Of Vector3)
  overload: VRSketchingGeometry.Meshing.RibbonMesh.GetCrossSection*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VRSketchingGeometry.Meshing.RibbonMesh.Scale
  commentId: P:VRSketchingGeometry.Meshing.RibbonMesh.Scale
  id: Scale
  parent: VRSketchingGeometry.Meshing.RibbonMesh
  langs:
  - csharp
  - vb
  name: Scale
  nameWithType: RibbonMesh.Scale
  fullName: VRSketchingGeometry.Meshing.RibbonMesh.Scale
  type: Property
  source:
    remote:
      path: Assets/VRSketchingGeometryPackage/Runtime/ModelingKernel/RibbonMesh.cs
      branch: fix/DocFXIntegration
      repo: git@github.com:hunsri/VRSketchingGeometry.git
    id: Scale
    path: Assets/VRSketchingGeometryPackage/Runtime/ModelingKernel/RibbonMesh.cs
    startLine: 22
  assemblies:
  - HTWBerlin.FKI.VRSketchingGeometry.Runtime
  namespace: VRSketchingGeometry.Meshing
  syntax:
    content: public Vector3 Scale { get; }
    parameters: []
    return:
      type: UnityEngine.Vector3
    content.vb: Public ReadOnly Property Scale As Vector3
  overload: VRSketchingGeometry.Meshing.RibbonMesh.Scale*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VRSketchingGeometry.Meshing.RibbonMesh.TransformPoints(System.Collections.Generic.List{UnityEngine.Vector3},UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3)
  commentId: M:VRSketchingGeometry.Meshing.RibbonMesh.TransformPoints(System.Collections.Generic.List{UnityEngine.Vector3},UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3)
  id: TransformPoints(System.Collections.Generic.List{UnityEngine.Vector3},UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3)
  parent: VRSketchingGeometry.Meshing.RibbonMesh
  langs:
  - csharp
  - vb
  name: TransformPoints(List<Vector3>, Vector3, Quaternion, Vector3)
  nameWithType: RibbonMesh.TransformPoints(List<Vector3>, Vector3, Quaternion, Vector3)
  fullName: VRSketchingGeometry.Meshing.RibbonMesh.TransformPoints(System.Collections.Generic.List<UnityEngine.Vector3>, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Vector3)
  type: Method
  source:
    remote:
      path: Assets/VRSketchingGeometryPackage/Runtime/ModelingKernel/RibbonMesh.cs
      branch: fix/DocFXIntegration
      repo: git@github.com:hunsri/VRSketchingGeometry.git
    id: TransformPoints
    path: Assets/VRSketchingGeometryPackage/Runtime/ModelingKernel/RibbonMesh.cs
    startLine: 45
  assemblies:
  - HTWBerlin.FKI.VRSketchingGeometry.Runtime
  namespace: VRSketchingGeometry.Meshing
  summary: "\nTransform the points of a cross section according to position, rotation and scale.\n"
  example: []
  syntax:
    content: public static List<Vector3> TransformPoints(List<Vector3> crossSection, Vector3 position, Quaternion rotation, Vector3 scale)
    parameters:
    - id: crossSection
      type: System.Collections.Generic.List{UnityEngine.Vector3}
      description: ''
    - id: position
      type: UnityEngine.Vector3
      description: ''
    - id: rotation
      type: UnityEngine.Quaternion
      description: ''
    - id: scale
      type: UnityEngine.Vector3
      description: ''
    return:
      type: System.Collections.Generic.List{UnityEngine.Vector3}
      description: ''
    content.vb: Public Shared Function TransformPoints(crossSection As List(Of Vector3), position As Vector3, rotation As Quaternion, scale As Vector3) As List(Of Vector3)
  overload: VRSketchingGeometry.Meshing.RibbonMesh.TransformPoints*
  nameWithType.vb: RibbonMesh.TransformPoints(List(Of Vector3), Vector3, Quaternion, Vector3)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VRSketchingGeometry.Meshing.RibbonMesh.TransformPoints(System.Collections.Generic.List(Of UnityEngine.Vector3), UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Vector3)
  name.vb: TransformPoints(List(Of Vector3), Vector3, Quaternion, Vector3)
- uid: VRSketchingGeometry.Meshing.RibbonMesh.GetVertices(System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{UnityEngine.Quaternion},UnityEngine.Vector3)
  commentId: M:VRSketchingGeometry.Meshing.RibbonMesh.GetVertices(System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{UnityEngine.Quaternion},UnityEngine.Vector3)
  id: GetVertices(System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{UnityEngine.Quaternion},UnityEngine.Vector3)
  parent: VRSketchingGeometry.Meshing.RibbonMesh
  langs:
  - csharp
  - vb
  name: GetVertices(List<Vector3>, List<Vector3>, List<Quaternion>, Vector3)
  nameWithType: RibbonMesh.GetVertices(List<Vector3>, List<Vector3>, List<Quaternion>, Vector3)
  fullName: VRSketchingGeometry.Meshing.RibbonMesh.GetVertices(System.Collections.Generic.List<UnityEngine.Vector3>, System.Collections.Generic.List<UnityEngine.Vector3>, System.Collections.Generic.List<UnityEngine.Quaternion>, UnityEngine.Vector3)
  type: Method
  source:
    remote:
      path: Assets/VRSketchingGeometryPackage/Runtime/ModelingKernel/RibbonMesh.cs
      branch: fix/DocFXIntegration
      repo: git@github.com:hunsri/VRSketchingGeometry.git
    id: GetVertices
    path: Assets/VRSketchingGeometryPackage/Runtime/ModelingKernel/RibbonMesh.cs
    startLine: 62
  assemblies:
  - HTWBerlin.FKI.VRSketchingGeometry.Runtime
  namespace: VRSketchingGeometry.Meshing
  summary: "\nPlace the cross sections at the points oriented by the rotations.\n"
  example: []
  syntax:
    content: public static List<Vector3> GetVertices(List<Vector3> crossSection, List<Vector3> points, List<Quaternion> rotations, Vector3 scale)
    parameters:
    - id: crossSection
      type: System.Collections.Generic.List{UnityEngine.Vector3}
      description: ''
    - id: points
      type: System.Collections.Generic.List{UnityEngine.Vector3}
      description: ''
    - id: rotations
      type: System.Collections.Generic.List{UnityEngine.Quaternion}
      description: ''
    - id: scale
      type: UnityEngine.Vector3
      description: Cross sections are scaled by this vector.
    return:
      type: System.Collections.Generic.List{UnityEngine.Vector3}
      description: ''
    content.vb: Public Shared Function GetVertices(crossSection As List(Of Vector3), points As List(Of Vector3), rotations As List(Of Quaternion), scale As Vector3) As List(Of Vector3)
  overload: VRSketchingGeometry.Meshing.RibbonMesh.GetVertices*
  nameWithType.vb: RibbonMesh.GetVertices(List(Of Vector3), List(Of Vector3), List(Of Quaternion), Vector3)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VRSketchingGeometry.Meshing.RibbonMesh.GetVertices(System.Collections.Generic.List(Of UnityEngine.Vector3), System.Collections.Generic.List(Of UnityEngine.Vector3), System.Collections.Generic.List(Of UnityEngine.Quaternion), UnityEngine.Vector3)
  name.vb: GetVertices(List(Of Vector3), List(Of Vector3), List(Of Quaternion), Vector3)
- uid: VRSketchingGeometry.Meshing.RibbonMesh.GetMesh(System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{UnityEngine.Quaternion},UnityEngine.Vector3)
  commentId: M:VRSketchingGeometry.Meshing.RibbonMesh.GetMesh(System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{UnityEngine.Quaternion},UnityEngine.Vector3)
  id: GetMesh(System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{UnityEngine.Quaternion},UnityEngine.Vector3)
  parent: VRSketchingGeometry.Meshing.RibbonMesh
  langs:
  - csharp
  - vb
  name: GetMesh(List<Vector3>, List<Vector3>, List<Quaternion>, Vector3)
  nameWithType: RibbonMesh.GetMesh(List<Vector3>, List<Vector3>, List<Quaternion>, Vector3)
  fullName: VRSketchingGeometry.Meshing.RibbonMesh.GetMesh(System.Collections.Generic.List<UnityEngine.Vector3>, System.Collections.Generic.List<UnityEngine.Vector3>, System.Collections.Generic.List<UnityEngine.Quaternion>, UnityEngine.Vector3)
  type: Method
  source:
    remote:
      path: Assets/VRSketchingGeometryPackage/Runtime/ModelingKernel/RibbonMesh.cs
      branch: fix/DocFXIntegration
      repo: git@github.com:hunsri/VRSketchingGeometry.git
    id: GetMesh
    path: Assets/VRSketchingGeometryPackage/Runtime/ModelingKernel/RibbonMesh.cs
    startLine: 84
  assemblies:
  - HTWBerlin.FKI.VRSketchingGeometry.Runtime
  namespace: VRSketchingGeometry.Meshing
  summary: "\nGet the mesh with the cross sections placed at the points oriented by the rotations.\nCross sections are scaled by scale.\n"
  example: []
  syntax:
    content: public static Mesh GetMesh(List<Vector3> crossSection, List<Vector3> points, List<Quaternion> rotations, Vector3 scale)
    parameters:
    - id: crossSection
      type: System.Collections.Generic.List{UnityEngine.Vector3}
      description: ''
    - id: points
      type: System.Collections.Generic.List{UnityEngine.Vector3}
      description: ''
    - id: rotations
      type: System.Collections.Generic.List{UnityEngine.Quaternion}
      description: ''
    - id: scale
      type: UnityEngine.Vector3
      description: ''
    return:
      type: UnityEngine.Mesh
      description: ''
    content.vb: Public Shared Function GetMesh(crossSection As List(Of Vector3), points As List(Of Vector3), rotations As List(Of Quaternion), scale As Vector3) As Mesh
  overload: VRSketchingGeometry.Meshing.RibbonMesh.GetMesh*
  nameWithType.vb: RibbonMesh.GetMesh(List(Of Vector3), List(Of Vector3), List(Of Quaternion), Vector3)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VRSketchingGeometry.Meshing.RibbonMesh.GetMesh(System.Collections.Generic.List(Of UnityEngine.Vector3), System.Collections.Generic.List(Of UnityEngine.Vector3), System.Collections.Generic.List(Of UnityEngine.Quaternion), UnityEngine.Vector3)
  name.vb: GetMesh(List(Of Vector3), List(Of Vector3), List(Of Quaternion), Vector3)
- uid: VRSketchingGeometry.Meshing.RibbonMesh.GetMeshFromVertices(System.Collections.Generic.List{UnityEngine.Vector3},System.Int32)
  commentId: M:VRSketchingGeometry.Meshing.RibbonMesh.GetMeshFromVertices(System.Collections.Generic.List{UnityEngine.Vector3},System.Int32)
  id: GetMeshFromVertices(System.Collections.Generic.List{UnityEngine.Vector3},System.Int32)
  parent: VRSketchingGeometry.Meshing.RibbonMesh
  langs:
  - csharp
  - vb
  name: GetMeshFromVertices(List<Vector3>, Int32)
  nameWithType: RibbonMesh.GetMeshFromVertices(List<Vector3>, Int32)
  fullName: VRSketchingGeometry.Meshing.RibbonMesh.GetMeshFromVertices(System.Collections.Generic.List<UnityEngine.Vector3>, System.Int32)
  type: Method
  source:
    remote:
      path: Assets/VRSketchingGeometryPackage/Runtime/ModelingKernel/RibbonMesh.cs
      branch: fix/DocFXIntegration
      repo: git@github.com:hunsri/VRSketchingGeometry.git
    id: GetMeshFromVertices
    path: Assets/VRSketchingGeometryPackage/Runtime/ModelingKernel/RibbonMesh.cs
    startLine: 97
  assemblies:
  - HTWBerlin.FKI.VRSketchingGeometry.Runtime
  namespace: VRSketchingGeometry.Meshing
  summary: "\nGenerate a mesh object from the given vertices.\n"
  example: []
  syntax:
    content: public static Mesh GetMeshFromVertices(List<Vector3> vertices, int crossSectionCount)
    parameters:
    - id: vertices
      type: System.Collections.Generic.List{UnityEngine.Vector3}
      description: ''
    - id: crossSectionCount
      type: System.Int32
      description: Number of vertices per cross section.
    return:
      type: UnityEngine.Mesh
      description: ''
    content.vb: Public Shared Function GetMeshFromVertices(vertices As List(Of Vector3), crossSectionCount As Integer) As Mesh
  overload: VRSketchingGeometry.Meshing.RibbonMesh.GetMeshFromVertices*
  nameWithType.vb: RibbonMesh.GetMeshFromVertices(List(Of Vector3), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VRSketchingGeometry.Meshing.RibbonMesh.GetMeshFromVertices(System.Collections.Generic.List(Of UnityEngine.Vector3), System.Int32)
  name.vb: GetMeshFromVertices(List(Of Vector3), Int32)
- uid: VRSketchingGeometry.Meshing.RibbonMesh.TransformPoint(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3)
  commentId: M:VRSketchingGeometry.Meshing.RibbonMesh.TransformPoint(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3)
  id: TransformPoint(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3)
  parent: VRSketchingGeometry.Meshing.RibbonMesh
  langs:
  - csharp
  - vb
  name: TransformPoint(Vector3, Vector3, Quaternion, Vector3)
  nameWithType: RibbonMesh.TransformPoint(Vector3, Vector3, Quaternion, Vector3)
  fullName: VRSketchingGeometry.Meshing.RibbonMesh.TransformPoint(UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Vector3)
  type: Method
  source:
    remote:
      path: Assets/VRSketchingGeometryPackage/Runtime/ModelingKernel/RibbonMesh.cs
      branch: fix/DocFXIntegration
      repo: git@github.com:hunsri/VRSketchingGeometry.git
    id: TransformPoint
    path: Assets/VRSketchingGeometryPackage/Runtime/ModelingKernel/RibbonMesh.cs
    startLine: 123
  assemblies:
  - HTWBerlin.FKI.VRSketchingGeometry.Runtime
  namespace: VRSketchingGeometry.Meshing
  summary: "\nTransform a single point.\n"
  example: []
  syntax:
    content: public static Vector3 TransformPoint(Vector3 point, Vector3 position, Quaternion rotation, Vector3 scale)
    parameters:
    - id: point
      type: UnityEngine.Vector3
      description: ''
    - id: position
      type: UnityEngine.Vector3
      description: ''
    - id: rotation
      type: UnityEngine.Quaternion
      description: ''
    - id: scale
      type: UnityEngine.Vector3
      description: ''
    return:
      type: UnityEngine.Vector3
      description: ''
    content.vb: Public Shared Function TransformPoint(point As Vector3, position As Vector3, rotation As Quaternion, scale As Vector3) As Vector3
  overload: VRSketchingGeometry.Meshing.RibbonMesh.TransformPoint*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VRSketchingGeometry.Meshing.RibbonMesh.#ctor(System.Collections.Generic.List{UnityEngine.Vector3},UnityEngine.Vector3)
  commentId: M:VRSketchingGeometry.Meshing.RibbonMesh.#ctor(System.Collections.Generic.List{UnityEngine.Vector3},UnityEngine.Vector3)
  id: '#ctor(System.Collections.Generic.List{UnityEngine.Vector3},UnityEngine.Vector3)'
  parent: VRSketchingGeometry.Meshing.RibbonMesh
  langs:
  - csharp
  - vb
  name: RibbonMesh(List<Vector3>, Vector3)
  nameWithType: RibbonMesh.RibbonMesh(List<Vector3>, Vector3)
  fullName: VRSketchingGeometry.Meshing.RibbonMesh.RibbonMesh(System.Collections.Generic.List<UnityEngine.Vector3>, UnityEngine.Vector3)
  type: Constructor
  source:
    remote:
      path: Assets/VRSketchingGeometryPackage/Runtime/ModelingKernel/RibbonMesh.cs
      branch: fix/DocFXIntegration
      repo: git@github.com:hunsri/VRSketchingGeometry.git
    id: .ctor
    path: Assets/VRSketchingGeometryPackage/Runtime/ModelingKernel/RibbonMesh.cs
    startLine: 128
  assemblies:
  - HTWBerlin.FKI.VRSketchingGeometry.Runtime
  namespace: VRSketchingGeometry.Meshing
  syntax:
    content: public RibbonMesh(List<Vector3> crossSection, Vector3 scale)
    parameters:
    - id: crossSection
      type: System.Collections.Generic.List{UnityEngine.Vector3}
    - id: scale
      type: UnityEngine.Vector3
    content.vb: Public Sub New(crossSection As List(Of Vector3), scale As Vector3)
  overload: VRSketchingGeometry.Meshing.RibbonMesh.#ctor*
  nameWithType.vb: RibbonMesh.RibbonMesh(List(Of Vector3), Vector3)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VRSketchingGeometry.Meshing.RibbonMesh.RibbonMesh(System.Collections.Generic.List(Of UnityEngine.Vector3), UnityEngine.Vector3)
  name.vb: RibbonMesh(List(Of Vector3), Vector3)
- uid: VRSketchingGeometry.Meshing.RibbonMesh.#ctor(UnityEngine.Vector3)
  commentId: M:VRSketchingGeometry.Meshing.RibbonMesh.#ctor(UnityEngine.Vector3)
  id: '#ctor(UnityEngine.Vector3)'
  parent: VRSketchingGeometry.Meshing.RibbonMesh
  langs:
  - csharp
  - vb
  name: RibbonMesh(Vector3)
  nameWithType: RibbonMesh.RibbonMesh(Vector3)
  fullName: VRSketchingGeometry.Meshing.RibbonMesh.RibbonMesh(UnityEngine.Vector3)
  type: Constructor
  source:
    remote:
      path: Assets/VRSketchingGeometryPackage/Runtime/ModelingKernel/RibbonMesh.cs
      branch: fix/DocFXIntegration
      repo: git@github.com:hunsri/VRSketchingGeometry.git
    id: .ctor
    path: Assets/VRSketchingGeometryPackage/Runtime/ModelingKernel/RibbonMesh.cs
    startLine: 139
  assemblies:
  - HTWBerlin.FKI.VRSketchingGeometry.Runtime
  namespace: VRSketchingGeometry.Meshing
  summary: "\nFlat ribbon shaped mesh.\nCross section is a straight line along local z axis.\n"
  example: []
  syntax:
    content: public RibbonMesh(Vector3 scale)
    parameters:
    - id: scale
      type: UnityEngine.Vector3
      description: ''
    content.vb: Public Sub New(scale As Vector3)
  overload: VRSketchingGeometry.Meshing.RibbonMesh.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VRSketchingGeometry.Meshing.RibbonMesh.GetMesh(System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{UnityEngine.Quaternion})
  commentId: M:VRSketchingGeometry.Meshing.RibbonMesh.GetMesh(System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{UnityEngine.Quaternion})
  id: GetMesh(System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{UnityEngine.Quaternion})
  parent: VRSketchingGeometry.Meshing.RibbonMesh
  langs:
  - csharp
  - vb
  name: GetMesh(List<Vector3>, List<Quaternion>)
  nameWithType: RibbonMesh.GetMesh(List<Vector3>, List<Quaternion>)
  fullName: VRSketchingGeometry.Meshing.RibbonMesh.GetMesh(System.Collections.Generic.List<UnityEngine.Vector3>, System.Collections.Generic.List<UnityEngine.Quaternion>)
  type: Method
  source:
    remote:
      path: Assets/VRSketchingGeometryPackage/Runtime/ModelingKernel/RibbonMesh.cs
      branch: fix/DocFXIntegration
      repo: git@github.com:hunsri/VRSketchingGeometry.git
    id: GetMesh
    path: Assets/VRSketchingGeometryPackage/Runtime/ModelingKernel/RibbonMesh.cs
    startLine: 153
  assemblies:
  - HTWBerlin.FKI.VRSketchingGeometry.Runtime
  namespace: VRSketchingGeometry.Meshing
  summary: "\nGet mesh for points and rotations.\nExisting mesh is overwritten.\n"
  example: []
  syntax:
    content: public Mesh GetMesh(List<Vector3> points, List<Quaternion> rotations)
    parameters:
    - id: points
      type: System.Collections.Generic.List{UnityEngine.Vector3}
      description: ''
    - id: rotations
      type: System.Collections.Generic.List{UnityEngine.Quaternion}
      description: ''
    return:
      type: UnityEngine.Mesh
      description: ''
    content.vb: Public Function GetMesh(points As List(Of Vector3), rotations As List(Of Quaternion)) As Mesh
  overload: VRSketchingGeometry.Meshing.RibbonMesh.GetMesh*
  nameWithType.vb: RibbonMesh.GetMesh(List(Of Vector3), List(Of Quaternion))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VRSketchingGeometry.Meshing.RibbonMesh.GetMesh(System.Collections.Generic.List(Of UnityEngine.Vector3), System.Collections.Generic.List(Of UnityEngine.Quaternion))
  name.vb: GetMesh(List(Of Vector3), List(Of Quaternion))
- uid: VRSketchingGeometry.Meshing.RibbonMesh.AddPoints(System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{UnityEngine.Quaternion})
  commentId: M:VRSketchingGeometry.Meshing.RibbonMesh.AddPoints(System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{UnityEngine.Quaternion})
  id: AddPoints(System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{UnityEngine.Quaternion})
  parent: VRSketchingGeometry.Meshing.RibbonMesh
  langs:
  - csharp
  - vb
  name: AddPoints(List<Vector3>, List<Quaternion>)
  nameWithType: RibbonMesh.AddPoints(List<Vector3>, List<Quaternion>)
  fullName: VRSketchingGeometry.Meshing.RibbonMesh.AddPoints(System.Collections.Generic.List<UnityEngine.Vector3>, System.Collections.Generic.List<UnityEngine.Quaternion>)
  type: Method
  source:
    remote:
      path: Assets/VRSketchingGeometryPackage/Runtime/ModelingKernel/RibbonMesh.cs
      branch: fix/DocFXIntegration
      repo: git@github.com:hunsri/VRSketchingGeometry.git
    id: AddPoints
    path: Assets/VRSketchingGeometryPackage/Runtime/ModelingKernel/RibbonMesh.cs
    startLine: 164
  assemblies:
  - HTWBerlin.FKI.VRSketchingGeometry.Runtime
  namespace: VRSketchingGeometry.Meshing
  summary: "\nAdd to the end of the existing mesh.\n"
  example: []
  syntax:
    content: public Mesh AddPoints(List<Vector3> points, List<Quaternion> rotations)
    parameters:
    - id: points
      type: System.Collections.Generic.List{UnityEngine.Vector3}
      description: ''
    - id: rotations
      type: System.Collections.Generic.List{UnityEngine.Quaternion}
      description: ''
    return:
      type: UnityEngine.Mesh
      description: ''
    content.vb: Public Function AddPoints(points As List(Of Vector3), rotations As List(Of Quaternion)) As Mesh
  overload: VRSketchingGeometry.Meshing.RibbonMesh.AddPoints*
  nameWithType.vb: RibbonMesh.AddPoints(List(Of Vector3), List(Of Quaternion))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VRSketchingGeometry.Meshing.RibbonMesh.AddPoints(System.Collections.Generic.List(Of UnityEngine.Vector3), System.Collections.Generic.List(Of UnityEngine.Quaternion))
  name.vb: AddPoints(List(Of Vector3), List(Of Quaternion))
- uid: VRSketchingGeometry.Meshing.RibbonMesh.AddPoint(UnityEngine.Vector3,UnityEngine.Quaternion)
  commentId: M:VRSketchingGeometry.Meshing.RibbonMesh.AddPoint(UnityEngine.Vector3,UnityEngine.Quaternion)
  id: AddPoint(UnityEngine.Vector3,UnityEngine.Quaternion)
  parent: VRSketchingGeometry.Meshing.RibbonMesh
  langs:
  - csharp
  - vb
  name: AddPoint(Vector3, Quaternion)
  nameWithType: RibbonMesh.AddPoint(Vector3, Quaternion)
  fullName: VRSketchingGeometry.Meshing.RibbonMesh.AddPoint(UnityEngine.Vector3, UnityEngine.Quaternion)
  type: Method
  source:
    remote:
      path: Assets/VRSketchingGeometryPackage/Runtime/ModelingKernel/RibbonMesh.cs
      branch: fix/DocFXIntegration
      repo: git@github.com:hunsri/VRSketchingGeometry.git
    id: AddPoint
    path: Assets/VRSketchingGeometryPackage/Runtime/ModelingKernel/RibbonMesh.cs
    startLine: 175
  assemblies:
  - HTWBerlin.FKI.VRSketchingGeometry.Runtime
  namespace: VRSketchingGeometry.Meshing
  summary: "\nAdd single point to the end of the mesh.\n"
  example: []
  syntax:
    content: public Mesh AddPoint(Vector3 point, Quaternion rotation)
    parameters:
    - id: point
      type: UnityEngine.Vector3
      description: ''
    - id: rotation
      type: UnityEngine.Quaternion
      description: ''
    return:
      type: UnityEngine.Mesh
      description: ''
    content.vb: Public Function AddPoint(point As Vector3, rotation As Quaternion) As Mesh
  overload: VRSketchingGeometry.Meshing.RibbonMesh.AddPoint*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VRSketchingGeometry.Meshing.RibbonMesh.DeletePoint
  commentId: M:VRSketchingGeometry.Meshing.RibbonMesh.DeletePoint
  id: DeletePoint
  parent: VRSketchingGeometry.Meshing.RibbonMesh
  langs:
  - csharp
  - vb
  name: DeletePoint()
  nameWithType: RibbonMesh.DeletePoint()
  fullName: VRSketchingGeometry.Meshing.RibbonMesh.DeletePoint()
  type: Method
  source:
    remote:
      path: Assets/VRSketchingGeometryPackage/Runtime/ModelingKernel/RibbonMesh.cs
      branch: fix/DocFXIntegration
      repo: git@github.com:hunsri/VRSketchingGeometry.git
    id: DeletePoint
    path: Assets/VRSketchingGeometryPackage/Runtime/ModelingKernel/RibbonMesh.cs
    startLine: 184
  assemblies:
  - HTWBerlin.FKI.VRSketchingGeometry.Runtime
  namespace: VRSketchingGeometry.Meshing
  summary: "\nDelete the last point of the mesh.\n"
  example: []
  syntax:
    content: public Mesh DeletePoint()
    return:
      type: UnityEngine.Mesh
      description: ''
    content.vb: Public Function DeletePoint As Mesh
  overload: VRSketchingGeometry.Meshing.RibbonMesh.DeletePoint*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: VRSketchingGeometry.Meshing
  commentId: N:VRSketchingGeometry.Meshing
  name: VRSketchingGeometry.Meshing
  nameWithType: VRSketchingGeometry.Meshing
  fullName: VRSketchingGeometry.Meshing
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VRSketchingGeometry.Meshing.RibbonMesh.GetCrossSection*
  commentId: Overload:VRSketchingGeometry.Meshing.RibbonMesh.GetCrossSection
  name: GetCrossSection
  nameWithType: RibbonMesh.GetCrossSection
  fullName: VRSketchingGeometry.Meshing.RibbonMesh.GetCrossSection
- uid: System.Collections.Generic.List{UnityEngine.Vector3}
  commentId: T:System.Collections.Generic.List{UnityEngine.Vector3}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Vector3>
  nameWithType: List<Vector3>
  fullName: System.Collections.Generic.List<UnityEngine.Vector3>
  nameWithType.vb: List(Of Vector3)
  fullName.vb: System.Collections.Generic.List(Of UnityEngine.Vector3)
  name.vb: List(Of Vector3)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: UnityEngine.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: UnityEngine.Vector3
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: UnityEngine.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: UnityEngine.Vector3
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: VRSketchingGeometry.Meshing.RibbonMesh.Scale*
  commentId: Overload:VRSketchingGeometry.Meshing.RibbonMesh.Scale
  name: Scale
  nameWithType: RibbonMesh.Scale
  fullName: VRSketchingGeometry.Meshing.RibbonMesh.Scale
- uid: UnityEngine.Vector3
  commentId: T:UnityEngine.Vector3
  parent: UnityEngine
  isExternal: true
  name: Vector3
  nameWithType: Vector3
  fullName: UnityEngine.Vector3
- uid: UnityEngine
  commentId: N:UnityEngine
  isExternal: true
  name: UnityEngine
  nameWithType: UnityEngine
  fullName: UnityEngine
- uid: VRSketchingGeometry.Meshing.RibbonMesh.TransformPoints*
  commentId: Overload:VRSketchingGeometry.Meshing.RibbonMesh.TransformPoints
  name: TransformPoints
  nameWithType: RibbonMesh.TransformPoints
  fullName: VRSketchingGeometry.Meshing.RibbonMesh.TransformPoints
- uid: UnityEngine.Quaternion
  commentId: T:UnityEngine.Quaternion
  parent: UnityEngine
  isExternal: true
  name: Quaternion
  nameWithType: Quaternion
  fullName: UnityEngine.Quaternion
- uid: VRSketchingGeometry.Meshing.RibbonMesh.GetVertices*
  commentId: Overload:VRSketchingGeometry.Meshing.RibbonMesh.GetVertices
  name: GetVertices
  nameWithType: RibbonMesh.GetVertices
  fullName: VRSketchingGeometry.Meshing.RibbonMesh.GetVertices
- uid: System.Collections.Generic.List{UnityEngine.Quaternion}
  commentId: T:System.Collections.Generic.List{UnityEngine.Quaternion}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Quaternion>
  nameWithType: List<Quaternion>
  fullName: System.Collections.Generic.List<UnityEngine.Quaternion>
  nameWithType.vb: List(Of Quaternion)
  fullName.vb: System.Collections.Generic.List(Of UnityEngine.Quaternion)
  name.vb: List(Of Quaternion)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: UnityEngine.Quaternion
    name: Quaternion
    nameWithType: Quaternion
    fullName: UnityEngine.Quaternion
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: UnityEngine.Quaternion
    name: Quaternion
    nameWithType: Quaternion
    fullName: UnityEngine.Quaternion
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VRSketchingGeometry.Meshing.RibbonMesh.GetMesh*
  commentId: Overload:VRSketchingGeometry.Meshing.RibbonMesh.GetMesh
  name: GetMesh
  nameWithType: RibbonMesh.GetMesh
  fullName: VRSketchingGeometry.Meshing.RibbonMesh.GetMesh
- uid: UnityEngine.Mesh
  commentId: T:UnityEngine.Mesh
  parent: UnityEngine
  isExternal: true
  name: Mesh
  nameWithType: Mesh
  fullName: UnityEngine.Mesh
- uid: VRSketchingGeometry.Meshing.RibbonMesh.GetMeshFromVertices*
  commentId: Overload:VRSketchingGeometry.Meshing.RibbonMesh.GetMeshFromVertices
  name: GetMeshFromVertices
  nameWithType: RibbonMesh.GetMeshFromVertices
  fullName: VRSketchingGeometry.Meshing.RibbonMesh.GetMeshFromVertices
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: VRSketchingGeometry.Meshing.RibbonMesh.TransformPoint*
  commentId: Overload:VRSketchingGeometry.Meshing.RibbonMesh.TransformPoint
  name: TransformPoint
  nameWithType: RibbonMesh.TransformPoint
  fullName: VRSketchingGeometry.Meshing.RibbonMesh.TransformPoint
- uid: VRSketchingGeometry.Meshing.RibbonMesh.#ctor*
  commentId: Overload:VRSketchingGeometry.Meshing.RibbonMesh.#ctor
  name: RibbonMesh
  nameWithType: RibbonMesh.RibbonMesh
  fullName: VRSketchingGeometry.Meshing.RibbonMesh.RibbonMesh
- uid: VRSketchingGeometry.Meshing.RibbonMesh.AddPoints*
  commentId: Overload:VRSketchingGeometry.Meshing.RibbonMesh.AddPoints
  name: AddPoints
  nameWithType: RibbonMesh.AddPoints
  fullName: VRSketchingGeometry.Meshing.RibbonMesh.AddPoints
- uid: VRSketchingGeometry.Meshing.RibbonMesh.AddPoint*
  commentId: Overload:VRSketchingGeometry.Meshing.RibbonMesh.AddPoint
  name: AddPoint
  nameWithType: RibbonMesh.AddPoint
  fullName: VRSketchingGeometry.Meshing.RibbonMesh.AddPoint
- uid: VRSketchingGeometry.Meshing.RibbonMesh.DeletePoint*
  commentId: Overload:VRSketchingGeometry.Meshing.RibbonMesh.DeletePoint
  name: DeletePoint
  nameWithType: RibbonMesh.DeletePoint
  fullName: VRSketchingGeometry.Meshing.RibbonMesh.DeletePoint
